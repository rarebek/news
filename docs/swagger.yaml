basePath: /v1
definitions:
  entity.Ad:
    properties:
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      title:
        type: string
      view_count:
        type: integer
    type: object
  entity.Admin:
    properties:
      avatar:
        type: string
      id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  entity.CreateAdRequest:
    properties:
      description:
        type: string
      image_url:
        type: string
      title:
        type: string
    type: object
  entity.Link:
    properties:
      link_name:
        type: string
      link_url:
        type: string
    type: object
  entity.SuperAdmin:
    properties:
      avatar:
        type: string
      id:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  models.Admin:
    properties:
      avatar:
        type: string
      id:
        type: string
      password:
        example: test
        type: string
      username:
        example: test
        type: string
    type: object
  models.AdminLoginRequest:
    properties:
      avatar:
        type: string
      password:
        example: test
        type: string
      username:
        example: test
        type: string
    type: object
  models.AdminLoginResponse:
    properties:
      access_token:
        type: string
    type: object
  models.CategoryResponse:
    properties:
      id:
        description: UUID as string
        type: string
      name:
        type: string
      sub_categories:
        items:
          $ref: '#/definitions/models.SubCategoryResponse'
        type: array
    type: object
  models.Message:
    properties:
      message:
        type: string
    type: object
  models.News:
    properties:
      description:
        type: string
      image_url:
        type: string
      links:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      name:
        type: string
      subcategory_ids:
        items:
          type: string
        type: array
    type: object
  models.SubCategoryResponse:
    properties:
      id:
        description: UUID as string
        type: string
      name:
        type: string
    type: object
  models.SuperAdmin:
    properties:
      avatar:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  models.SuperAdminLoginRequest:
    properties:
      avatar:
        type: string
      password:
        example: test
        type: string
      phone_number:
        example: test
        type: string
    type: object
  v1.response:
    properties:
      error:
        example: message
        type: string
      status:
        type: boolean
    type: object
info:
  contact: {}
  description: 'Backend - Nodirbek No''monov     TG: https://t.me/alwaysgolang'
  title: news back-end
  version: "1.0"
paths:
  /ads:
    get:
      description: returns ads
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Gets ad details
      tags:
      - ads
    post:
      consumes:
      - application/json
      description: Create a new ad with the given details
      parameters:
      - description: Ad details
        in: body
        name: ad
        required: true
        schema:
          $ref: '#/definitions/entity.CreateAdRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Ad'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Create a new ad
      tags:
      - ads
  /ads/{id}:
    delete:
      description: Delete an ad by ID
      parameters:
      - description: Ad ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete an ad
      tags:
      - ads
    put:
      description: Edits ad by ID
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Update Ad
      tags:
      - ads
  /auth/admin/{id}:
    get:
      consumes:
      - application/json
      description: This method is getting admin by its id
      operationId: get-admin
      parameters:
      - description: ID of the admin to get
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Admin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Get Admin Data
      tags:
      - admin
  /auth/admin/create:
    post:
      consumes:
      - application/json
      description: Creates an admin
      operationId: superadmin-create-admin
      parameters:
      - description: Phone Number and Password to create Admin
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AdminLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Create Admin
      tags:
      - superadmin
  /auth/admin/delete/{id}:
    delete:
      consumes:
      - application/json
      description: This method deletes admin.
      operationId: superadmin-delete-admin
      parameters:
      - description: ID of the admin to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete Admin
      tags:
      - superadmin
  /auth/admin/edit:
    put:
      consumes:
      - application/json
      description: ID of the admin to update and other fields will be updated.
      operationId: edit-admins
      parameters:
      - description: ID of the admin to edit
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Edit Admin
      tags:
      - superadmin
  /auth/admin/getall:
    get:
      consumes:
      - application/json
      description: Gets All Admins
      operationId: get-all-admins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Admin'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Get All Admins
      tags:
      - superadmin
  /auth/admin/login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin and returns an access token on successful
        login.
      operationId: admin-login
      parameters:
      - description: Phone Number and Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Admin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Login
      tags:
      - admin
  /auth/superadmin/edit:
    put:
      consumes:
      - application/json
      description: Superadmin updates by its id.
      operationId: edit-super-admin
      parameters:
      - description: Superadmin data for update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SuperAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Edit Super Admin
      tags:
      - superadmin
  /auth/superadmin/login:
    post:
      consumes:
      - application/json
      description: Authenticates a super admin and returns an access token on successful
        login.
      operationId: superadmin-login
      parameters:
      - description: Phone Number and Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SuperAdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuperAdmin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Super Admin Login
      tags:
      - superadmin
  /category/getall:
    get:
      consumes:
      - application/json
      description: This method retrieves all categories with their subcategories.
      operationId: get-all-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CategoryResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get All Categories
      tags:
      - categories
  /file/upload:
    post:
      consumes:
      - multipart/form-data
      description: Api for image upload
      parameters:
      - description: Image
        in: formData
        name: file
        required: true
        type: file
      - description: Bucket type to put image
        in: formData
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Image upload
      tags:
      - file-upload
  /news/create:
    post:
      consumes:
      - application/json
      description: This method for creating a news
      operationId: create-news
      parameters:
      - description: News details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.News'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Create News
      tags:
      - news
  /news/delete/{id}:
    delete:
      consumes:
      - application/json
      description: This method deleting news
      operationId: delete-news
      parameters:
      - description: ID of the news to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete News
      tags:
      - news
  /news/filtered:
    get:
      consumes:
      - application/json
      description: This method retrieves news based on optional filters (subcategory
        IDs and category ID) with pagination.
      operationId: get-filtered-news
      parameters:
      - collectionFormat: csv
        description: List of subcategory IDs
        in: query
        items:
          type: string
        name: sub_category_ids
        type: array
      - description: Category ID
        in: query
        name: category_id
        type: string
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.News'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get Filtered News
      tags:
      - news
  /news/get/{id}:
    get:
      consumes:
      - application/json
      description: This method retrieves a news item by its ID
      operationId: get-news-by-id
      parameters:
      - description: ID of the news to retrieve
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.News'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get News By ID
      tags:
      - news
  /news/getall:
    get:
      consumes:
      - application/json
      description: This method retrieves all news with pagination.
      operationId: get-all-news
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.News'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get All News
      tags:
      - news
  /news/update/{id}:
    put:
      consumes:
      - application/json
      description: This method updates an existing news item
      operationId: update-news
      parameters:
      - description: ID of the news to update
        in: path
        name: id
        required: true
        type: string
      - description: Updated news details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.News'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Update News
      tags:
      - news
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
